megcc_url = 'git@git-core.megvii-inc.com:brain-sdk/megcc.git'
megcc_branch = 'dev'
megcc_dest_url = 'git@github.com:MegEngine/MegCC.git'
megcc_dest_fetch = 'main'
megcc_dest_push = 'main'

megcc_files = glob(
    [
        'ci/**',
        'benchmark/**',
        'compiler/**',
        'doc/**',
        'script/**',
        'immigration/**',
        'runtime/**',
        'yolox_example/**',
        'README.md',
        'README_ZH_CN.md',
        'third_party/tcc/**',
     ],
     exclude = [
        'ci/resource/**',
        'ci/copybara.sh',
        'immigration/script/**',
        'ci/all_integreation_test.sh',
        'ci/run_integration_test.sh',
        'compiler/script/ci/remote_test.py',
        'compiler/script/ci/remote_test_config.yaml',
    ],
 )

megcc_export_files = glob(
    [
        'ci/**',
        'benchmark/**',
        'compiler/**',
        'doc/**',
        'script/**',
        'immigration/**',
        'runtime/**',
        'yolox_example/**',
        'README.md',
        'README_ZH_CN.md',
        'third_party/tcc/**',
    ],
)

core.workflow(
    name = 'default',
    origin = git.origin(
        url = megcc_url,
        ref = megcc_branch,
    ),

    destination = git.destination(
        url =megcc_dest_url,
        fetch = megcc_dest_fetch,
        push = megcc_dest_push,
    ),

    origin_files = megcc_files,
    destination_files = megcc_export_files,

    authoring = authoring.overwrite("Megvii Engine Team <megengine@megvii.com>"),
    transformations = [
        core.transform([
            core.replace(
                before = "git@git-core.megvii-inc.com:brain-sdk/MegBrain.git",
                after = "https://github.com/MegEngine/MegEngine.git",
                paths = glob([
                    ".gitmodules",
                ]),
            ),
            core.replace(
                before = "git@git-core.megvii-inc.com:third-party/flatcc.git",
                after = "https://github.com/dvidelabs/flatcc.git",
                paths = glob([
                    ".gitmodules",
                ]),
            ),
            core.replace(
                before = "git@git-core.megvii-inc.com:third-party/flatbuffers.git",
                after = "https://github.com/google/flatbuffers.git",
                paths = glob([
                    ".gitmodules",
                ]),
            ),
            core.replace(
                before = "git@git-core.megvii-inc.com:third-party/llvm-project.git",
                after = "https://github.com/llvm/llvm-project.git",
                paths = glob([
                    ".gitmodules",
                ]),
            ),
            core.replace(
                before = "git@git-core.megvii-inc.com:third-party/gtest.git",
                after = "https://github.com/google/googletest.git",
                paths = glob([
                    ".gitmodules",
                ]),
            ),

            core.replace(
                before = "https://oss.iap.hh-b.brainpp.cn/megengine-built/megcc",
                after = "https://github.com/MegEngine/MegCC/releases",
                paths = glob([
                    "README.md",
                    "README_ZH_CN.md",
                    "doc/first-use.md",
                ]),
            ),
            core.replace(
                before = "${x}",
                after = "buf[0] = 0",
                regex_groups = {
                    "x": "buf\[0\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),

             core.replace(
                before = "${x}",
                after = "buf[1] = 1",
                regex_groups = {
                    "x": "buf\[1\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),
             core.replace(
                before = "${x}",
                after = "buf[2] = 2",
                regex_groups = {
                    "x": "buf\[2\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),
             core.replace(
                before = "${x}",
                after = "buf[3] = 3",
                regex_groups = {
                    "x": "buf\[3\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),
             core.replace(
                before = "${x}",
                after = "buf[4] = 4",
                regex_groups = {
                    "x": "buf\[4\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),
             core.replace(
                before = "${x}",
                after = "buf[5] = 5",
                regex_groups = {
                    "x": "buf\[5\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),
             core.replace(
                before = "${x}",
                after = "buf[6] = 6",
                regex_groups = {
                    "x": "buf\[6\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),
             core.replace(
                before = "${x}",
                after = "buf[7] = 7",
                regex_groups = {
                    "x": "buf\[7\] = \d+",
                },
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4/rc4_cryption_base.h",
                ]),
            ),
            
            core.replace(
                before = "data[0] = 0xc74ecc224703f00b;",
                after = "data[0] = 0x0123456789abcdef;",
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4_cryption.cpp",
                ]),
            ),
            core.replace(
                before = "data[1] = 0x272de6aa57433b6a;",
                after = "data[1] = 0xfdecba9876543210;",
                paths = glob([
                    "compiler/lib/Target/Hako/decryption/rc4_cryption.cpp",
                ]),
            ),
            core.replace(
                before = "std::vector<std::string> valid_magic{\"mgb0001\", \"mgb0000a\", \"MGBC\", \"MGBS\"};",
                after = "std::vector<std::string> valid_magic{\"MGBC\", \"MGBS\"};",
                paths = glob([
                    "compiler/lib/Target/Hako/hako_parse.cpp",
                ]),
            ),
            core.replace(
                before = "\"hako\", llvm::cl::desc(\"specific megface version used by hako\"),",
                after = "\"hako\", llvm::cl::desc(\"specific version used for encrypt\"),",
                paths = glob([
                    "compiler/lib/Target/MGB/importer.cpp",
                ]),
            ),
            core.replace(
                before = "${x}",
                after = "",
                multiline = True,
                regex_groups = {
                    "x": "(?m)\\n*^.*BEGIN-INTERNAL[\\w\\W]*?END-INTERNAL.*$",
                },
            ),
            core.replace(
                before = "Write changelog https://discourse.brainpp.cn/t/topic/56470",
                after = "Write changelog",
                paths = glob([
                    "doc/how-to-release.md",
                ]),
            ),
            core.replace(
                before = "[brain++ oss web](https://oss.iap.hh-b.brainpp.cn/megengine-built/megcc)",
                after = "[github](https://github.com/MegEngine/MegCC/releases/download)",
                paths = glob([
                    "doc/how-to-use-chinese.md",
                    "doc/how-to-use.md",
                ]),
            ),  

            core.replace(
                before = "MegBrain",
                after = "MegEngine",
                paths = glob([
                    "ci/prepare.sh",
                ]),
            ),
            core.replace(
                before = "megbrain",
                after = "megengine",
                paths = glob([
                    'compiler/test/kernel/prebuild_include/megbrain/enum_reflection.h.inl'
                ]),
            ),
            core.todo_replace(
                mode = 'SCRUB_NAMES'
            ),
        ], reversal=[], ignore_noop=True),
    ],
    mode = 'ITERATIVE',
)
