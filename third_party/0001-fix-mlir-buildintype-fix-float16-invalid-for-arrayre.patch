From 666ec37222b3523b64eef615c57598550180ee26 Mon Sep 17 00:00:00 2001
From: yuxiongxiong <yuxiongxiong@megvii.com>
Date: Tue, 7 Feb 2023 16:39:51 +0800
Subject: [PATCH] fix(mlir/buildintype): fix float16 invalid for arrayref int16

---
 mlir/include/mlir/IR/BuiltinAttributes.h | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/mlir/include/mlir/IR/BuiltinAttributes.h b/mlir/include/mlir/IR/BuiltinAttributes.h
index 5399718f6758..56871ef1d909 100644
--- a/mlir/include/mlir/IR/BuiltinAttributes.h
+++ b/mlir/include/mlir/IR/BuiltinAttributes.h
@@ -61,7 +61,8 @@ protected:
 };
 
 /// Type trait detector that checks if a given type T is a complex type.
-template <typename T> struct is_complex_t : public std::false_type {};
+template <typename T>
+struct is_complex_t : public std::false_type {};
 template <typename T>
 struct is_complex_t<std::complex<T>> : public std::true_type {};
 } // namespace detail
@@ -81,7 +82,8 @@ public:
   /// floating point type that can be used to access the underlying element
   /// types of a DenseElementsAttr.
   // TODO: Use std::disjunction when C++17 is supported.
-  template <typename T> struct is_valid_cpp_fp_type {
+  template <typename T>
+  struct is_valid_cpp_fp_type {
     /// The type is a valid floating point type if it is a builtin floating
     /// point type, or is a potentially user defined floating point type. The
     /// latter allows for supporting users that have custom types defined for
@@ -109,6 +111,11 @@ public:
                             is_valid_cpp_fp_type<T>::value>::type>
   static DenseElementsAttr get(const ShapedType &type, ArrayRef<T> values) {
     const char *data = reinterpret_cast<const char *>(values.data());
+    if (type.getElementType().isF16()) {
+      return getRawIntOrFloat(type,
+                              ArrayRef<char>(data, values.size() * sizeof(T)),
+                              sizeof(T), false, false);
+    }
     return getRawIntOrFloat(
         type, ArrayRef<char>(data, values.size() * sizeof(T)), sizeof(T),
         std::numeric_limits<T>::is_integer, std::numeric_limits<T>::is_signed);
-- 
2.25.1

